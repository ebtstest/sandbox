################################################################################################
string to list:
################################################################################################
  list1 = list(str1)

################################################################################################
create list with for loop
################################################################################################
  >>> def return_xy(x,y):
	    return(x,y)
  >>> list3 = [return_xy(x,y) for x in list1 for y in list2]
  >>> list3
      [('a', 'h'), ('a', 'e'), ('a', 'l'), ('a', 'l'), ('a', 'o'), ('b', 'h'), ('b', 'e'), ('b', 'l'), ('b', 'l'), ('b', 'o'), ('c', 'h'), ('c', 'e'), ('c', 'l'), ('c', 'l'), ('c', 'o'), ('d', 'h'), ('d', 'e'), ('d', 'l'), ('d', 'l'), ('d', 'o'), ('e', 'h'), ('e', 'e'), ('e', 'l'), ('e', 'l'), ('e', 'o')]
  >>> list3 = [[x,y] for x in list1 for y in list2]
  >>> list3
      [['a', 'h'], ['a', 'e'], ['a', 'l'], ['a', 'l'], ['a', 'o'], ['b', 'h'], ['b', 'e'], ['b', 'l'], ['b', 'l'], ['b', 'o'], ['c', 'h'], ['c', 'e'], ['c', 'l'], ['c', 'l'], ['c', 'o'], ['d', 'h'], ['d', 'e'], ['d', 'l'], ['d', 'l'], ['d', 'o'], ['e', 'h'], ['e', 'e'], ['e', 'l'], ['e', 'l'], ['e', 'o']]

################################################################################################
list.reverse() vs reversed(list)
list.sort() vs sorted(list)
################################################################################################
  list.reverse() is inplace. reversed() return "list_reverseiterator object"
  list.sort() is inplace. reversed() return "sorted list"

################################################################################################
map() filter() reduce()
################################################################################################
  >>> a = [1,2,3,4]
  >>> b = [17,12,11,10]
  >>> c = [-1,-4,5,9]
  >>> map(lambda x,y:x+y, a,b)
      [18, 14, 14, 14]
  >>> map(lambda x,y,z:x+y+z, a,b,c)
      [17, 10, 19, 23]
  >>> map(lambda x,y,z:x+y-z, a,b,c)
      [19, 18, 9, 5]
  >>> fib = [0,1,1,2,3,5,8,13,21,34,55]
  >>> result = filter(lambda x: x % 2, fib)
  >>> print result
      [1, 1, 3, 5, 13, 21, 55]
  >>> result = filter(lambda x: x % 2 == 0, fib)
  >>> print result
      [0, 2, 8, 34]
  The function reduce(func, seq) continually applies the function func() to the sequence seq. It returns a single value.
  >>> f = lambda a,b: a if (a > b) else b
  >>> reduce(f, [47,11,42,102,13])
      102
  >>> reduce(lambda x, y: x+y, range(1,101))
      5050

################################################################################################
Slicing
################################################################################################
  >>> str1='abcde'
  >>> str1[-1]
      'e'
  >>> str1[:-1]
      'abcd'
  >>> str1[::-1]
      'edcba'

################################################################################################
list.sort and the sorted
################################################################################################
  >>> fruits = ['grape', 'raspberry', 'apple', 'banana']
  >>> sorted(fruits, reverse=True)
      ['raspberry', 'grape', 'banana', 'apple']
  >>> sorted(fruits, key=len)
      ['grape', 'apple', 'banana', 'raspberry']
  >>> sorted(fruits, key=len, reverse=True)
      ['raspberry', 'banana', 'grape', 'apple']
      
################################################################################################
bisect.bisect() and bisect.insort()
################################################################################################
  >>> def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):
      ... i = bisect.bisect(breakpoints, score)
      ... return grades[i]
      ...
  >>> [grade(score) for score in [33, 99, 77, 70, 89, 90, 100]]
      ['F', 'A', 'C', 'C', 'B', 'A', 'A']
  insort(seq, item) inserts item into seq so as to keep seq in ascending order

################################################################################################
Array.array numpy scipy
################################################################################################
  >>> a = numpy.arange(12)
  >>> a
      array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
  >>> a.shape = 3, 4
  >>> a
      array([[ 0, 1, 2, 3],
            [ 4, 5, 6, 7],
            [ 8, 9, 10, 11]])
  >>> a[2]
      array([ 8, 9, 10, 11])
  >>> a[2, 1]
      9
  >>> a[:, 1]
      array([1, 5, 9])
  >>> a.transpose()
      array([[ 0, 4, 8],
            [ 1, 5, 9],
            [ 2, 6, 10],
            [ 3, 7, 11]])
            

################################################################################################
deque
################################################################################################
  >>> from collections import deque
  >>> dq = deque(range(10), maxlen=10)
  >>> dq
      deque([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], maxlen=10)
  >>> dq.rotate(3)
  >>> dq
      deque([7, 8, 9, 0, 1, 2, 3, 4, 5, 6], maxlen=10)
  >>> dq.rotate(-4)
  >>> dq
      deque([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], maxlen=10)
  >>> dq.appendleft(-1)
  >>> dq
      deque([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9], maxlen=10)
  >>> dq.extend([11, 22, 33])
  >>> dq
      deque([3, 4, 5, 6, 7, 8, 9, 11, 22, 33], maxlen=10)
  >>> dq.extendleft([10, 20, 30, 40])
  >>> dq
      deque([40, 30, 20, 10, 3, 4, 5, 6, 7, 8], maxlen=10)

################################################################################################
heapq
################################################################################################
cheap = heapq.nsmallest(3, portfolio, key=lambda s: s['price'])
expensive = heapq.nlargest(3, portfolio, key=lambda s: s['price'])

>>> import heapq
>>> nums = [1, 8, 2, 23, 7, -4, 18, 23, 42, 37, 2]
>>> heapq.heapify(nums)
>>> heapq.nlargest(3, nums)


################################################################################################
enumerate(sequence, start=0)
################################################################################################
  >>> seasons = ['Spring', 'Summer', 'Fall', 'Winter']
  >>> list(enumerate(seasons))
      [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]
  >>> list(enumerate(seasons, start=1))
      [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]


In order to perform useful calculations on the dictionary contents, it is often useful to
invert the keys and values of the dictionary using zip() .

	min_price = min(zip(prices.values(), prices.keys()))
	# min_price is (10.75, 'FB')
	max_price = max(zip(prices.values(), prices.keys()))
	# max_price is (612.78, 'AAPL')
Similarly, to rank the data, use zip() with sorted() , as in the following:
	prices_sorted = sorted(zip(prices.values(), prices.keys()))


Finding Commonalities in Two Dictionaries
	# Find keys in common
	a.keys() & b.keys()
	# { 'x', 'y' }
	# Find keys in a that are not in b
	a.keys() - b.keys()
	# { 'z' }
	# Find (key,value) pairs in common
	a.items() & b.items() # { ('y', 2) }
	# Make a new dictionary with certain keys removed
	c = {key:a[key] for key in a.keys() - {'z', 'w'}}

Sorting a List of Dictionaries by a Common Key
sorting this type of structure is easy using the operator module’s itemgetter function.
		rows = [
		{'fname': 'Brian', 'lname': 'Jones', 'uid': 1003},
		{'fname': 'David', 'lname': 'Beazley', 'uid': 1002},
		{'fname': 'John', 'lname': 'Cleese', 'uid': 1001},
		{'fname': 'Big', 'lname': 'Jones', 'uid': 1004} ]
		
		from operator import itemgetter
		rows_by_fname = sorted(rows, key=itemgetter('fname'))
		rows_by_uid = sorted(rows, key=itemgetter('uid'))

subset of dictionary:
	# Make a dictionary of all prices over 200
	p1 = { key:value for key, value in prices.items() if value > 200 }
	# Make a dictionary of tech stocks
	tech_names = { 'AAPL', 'IBM', 'HPQ', 'MSFT' }
	p2 = { key:value for key,value in prices.items() if key in tech_names }

collections.namedtuple:
	>>> from collections import namedtuple
	>>> Subscriber = namedtuple('Subscriber', ['addr', 'joined'])
	>>> sub = Subscriber('jonesy@example.com', '2012-10-19')
	>>> sub
	Subscriber(addr='jonesy@example.com', joined='2012-10-19')
	>>> sub.addr
	'jonesy@example.com'
	>>> sub.joined
	'2012-10-19'
	>>>
	
Combining Multiple Mappings into a Single Mapping
	from collections import ChainMap
	c = ChainMap(a,b)

split string:
	>>> line = 'asdf fjdk; afed, fjek,asdf,	foo'
	>>> import re
	>>> re.split(r'[;,\s]\s*', line)
	['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo']

	>>> fields = re.split(r'(;|,|\s)\s*', line)
	>>> fields
	['asdf', ' ', 'fjdk', ';', 'afed', ',', 'fjek', ',', 'asdf', ',', 'foo']


	>>>> text1 = '11/27/2012'
	>>>> text2 = 'Nov 27, 2012'
	import re
	# Simple matching: \d+ means match one or more digits
	if re.match(r'\d+/\d+/\d+', text1):
		print('yes')
	else:
		print('no')
	if re.match(r'\d+/\d+/\d+', text2):
		print('yes')
	else:
		print('no')




Matching Strings Using Shell Wildcard Patterns
	The fnmatch module provides two functions— fnmatch() and fnmatchcase() —that
	can be used to perform such matching. The usage is simple:
	>>> from fnmatch import fnmatch, fnmatchcase
	>>> fnmatch('foo.txt', '*.txt')
	True
	>>> fnmatch('foo.txt', '?oo.txt')
	True
	>>> fnmatch('Dat45.csv', 'Dat[0-9]*')

>>> text = 'yeah, but no, but yeah, but no, but yeah'
>>> # Exact match
>>> # Match at start or end
>>> text.startswith('yeah')
True
>>> text.endswith('no')
False
>>> # Search for the location of the first occurrence
>>> text.find('no')
10
>>>


Searching and Replacing Text
	>> text = 'yeah, but no, but yeah, but no, but yeah'
	>>> text.replace('yeah', 'yep')
	'yep, but no, but yep, but no, but yep'
	>>>
	
	>>> text = 'Today is 11/27/2012. PyCon starts 3/13/2013.'
	>>> import re
	>>> re.sub(r'(\d+)/(\d+)/(\d+)', r'\3-\1-\2', text)
	'Today is 2012-11-27. PyCon starts 2013-3-13.'
	>>>

Searching and Replacing Case-Insensitive Text
	>>> text = 'UPPER PYTHON, lower python, Mixed Python'
	>>> re.findall('python', text, flags=re.IGNORECASE)
	['PYTHON', 'python', 'Python']
	>>> re.sub('python', 'snake', text, flags=re.IGNORECASE)
	'UPPER snake, lower snake, Mixed snake'
	>>>

Combining and Concatenating Strings
	>>> parts = ['Is', 'Chicago', 'Not', 'Chicago?']
	>>> ' '.join(parts)
	'Is Chicago Not Chicago?'
	>>> ','.join(parts)
	'Is,Chicago,Not,Chicago?'
	>>> ''.join(parts)
	'IsChicagoNotChicago?'

>>> 'The value is {:0,.2f}'.format(x)
'The value is 1,234.57'
>>> x
1234.56789
>>> format(x, '0.1f')
'1234.6'
>>> format(-x, '0.1f')
'-1234.6'
>>> int.from_bytes(data, 'little')
69120565665751139577663547927094891008
>>> int.from_bytes(data, 'big')
94522842520747284487117727783387188
>>> x = 94522842520747284487117727783387188
>>> x.to_bytes(16, 'big')
b'\x00\x124V\x00x\x90\xab\x00\xcd\xef\x01\x00#\x004'
>>> x.to_bytes(16, 'little')
b'4\x00#\x00\x01\xef\xcd\x00\xab\x90x\x00V4\x12\x00'
>>> from fractions import Fraction
>>> a = Fraction(5, 4)
>>> b = Fraction(7, 16)
>>> print(a + b)
27/16
>>> print(a * b)
35/64


Picking Things at Random
	import random
	values = [1, 2, 3, 4, 5, 6]
	random.choice(values)

	random.shuffle(values)
	values
	[2, 4, 6, 5, 3, 1]
	random.shuffle(values)
To produce uniform floating-point values in the range 0 to 1, use random.random() :
	>>> random.random()
	0.9406677561675867
	>>> random.random()
	0.133129581343897

random.seed()
# Seed based on system time or os.urandom()
random.seed(12345)
# Seed based on integer given

>>> from datetime import datetime
>>> a = datetime(2012, 9, 23)
>>> print(a + timedelta(days=10))
2012-10-03 00:00:00
>>> now = datetime.today()
>>> print(now)
2012-12-21 14:54:43.094063
>>> print(now + timedelta(minutes=10))
2012-12-21 15:04:43.094063

Converting Strings into Datetimes
	>>> from datetime import datetime
	>>> text = '2012-09-20'
	>>> y = datetime.strptime(text, '%Y-%m-%d')

>>> # Localize the date for Chicago
>>> central = timezone('US/Central')
>>> loc_d = central.localize(d)
>>> print(loc_d)
2012-12-21 09:30:00-06:00

>>> d = datetime(2013, 3, 10, 1, 45)
>>> loc_d = central.localize(d)
>>> print(loc_d)
2013-03-10 01:45:00-06:00
>>> from datetime import timedelta
>>> later = central.normalize(loc_d + timedelta(minutes=30))
>>> print(later)
2013-03-10 03:15:00-05:00

#################################################################
Class
#################################################################
class C(B):
	def __init__(self):
		super().__init__()
		self.__private = 1
	# Does not override B.__private
	# Does not override B.__private_method()
	def __private_method(self):

Calling a Method on a Parent Class
	class A:
		def spam(self):
			print('A.spam')
	class B(A):
		def spam(self):
			print('B.spam')
			super().spam()

################################################################################################
Iterator functions
################################################################################################
Iterator	          Arguments	                                                        Results	Example
count()	            start, [step]	start, start+step, start+2*step, ...	        count(10) --> 10 11 12 13 14 ...
cycle()	            p	p0, p1, ... plast, p0, p1, ...	                                cycle('ABCD') --> A B C D A B C D ...
repeat()	    elem [,n]	elem, elem, elem, ... endlessly or up to n times        repeat(10, 3) --> 10 10 10
chain()	            p, q, ...	p0, p1, ... plast, q0, q1, ...	                        chain('ABC', 'DEF') --> A B C D E F
compress()	    data, selectors	(d[0] if s[0]), (d[1] if s[1]), ...	        compress('ABCDEF', [1,0,1,0,1,1]) --> A C E F
dropwhile()	    pred, seq	seq[n], seq[n+1], starting when pred fails	        dropwhile(lambda x: x<5, [1,4,6,4,1]) --> 6 4 1
groupby()	    iterable[, keyfunc]	sub-iterators grouped by value of keyfunc(v)	 
ifilter()	    pred, seq	elements of seq where pred(elem) is true 	        ifilter(lambda x: x%2, range(10)) --> 1 3 5 7 9
ifilterfalse()	    pred, seq	elements of seq where pred(elem) is false             	ifilterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8
islice()	    seq, [start,] stop [, step]	elements from seq[start:stop:step]	islice('ABCDEFG', 2, None) --> C D E F G
imap()	            func, p, q, ...	func(p0, q0), func(p1, q1), ...	                imap(pow, (2,3,10), (5,2,3)) --> 32 9 1000
starmap()	    func, seq	func(*seq[0]), func(*seq[1]), ...	                starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000
tee()	            it, n	it1, it2, ... itn splits one iterator into n	 
takewhile()	    pred, seq	seq[0], seq[1], until pred fails	                takewhile(lambda x: x<5, [1,4,6,4,1]) --> 1 4
izip()	            p, q, ...	(p[0], q[0]), (p[1], q[1]), ...	                        izip('ABCD', 'xy') --> Ax By
izip_longest()	    p, q, ...	(p[0], q[0]), (p[1], q[1]), ...	                        izip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D-

Combinatoric generators:
product()	          p, q, ... [repeat=1]	cartesian product, equivalent to a nested for-loop
permutations()	          p[, r]	r-length tuples, all possible orderings, no repeated elements
combinations()     	  p, r	r-length tuples, in sorted order, no repeated elements
combinations_with_replacement()	p, r	r-length tuples, in sorted order, with repeated elements
product('ABCD', repeat=2)	 	          AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD
permutations('ABCD', 2)	 	                  AB AC AD BA BC BD CA CB CD DA DB DC
combinations('ABCD', 2)	 	                  AB AC AD BC BD CD
combinations_with_replacement('ABCD', 2)	  AA AB AC AD BB BC BD CC CD DD

groupby example:
from operator import itemgetter
from itertools import groupby
# Sort by the desired field first
rows.sort(key=itemgetter('date'))
# Iterate in groups
for date, items in groupby(rows, key=itemgetter('date')):
	print(date)
		for i in items:
			print(' ', i)


################################################################################################
collections
################################################################################################
collections.OrderedDict
      maintains keys in insertion order, allowing iteration over items in a predictable
      order. The popitem method of an OrderedDict pops the first item by default, but
      if called as my_odict.popitem(last=True), it pops the last item added.
collections.ChainMap
      holds a list of mappings which can be searched as one. The lookup is performed on
      each mapping in order, and succeeds if the key is found in any of them. This is useful
      to interpreters for languages with nested scopes, where each mapping represents a
      scope context. The ChainMap section in the collections docs has several examples
      of ChainMap usage, including this snippet inspired by the basic rules of variable
      lookup in Python:
            import builtins
            pylookup = ChainMap(locals(), globals(), vars(builtins))
collections.Counter
      >>> ct = collections.Counter('abracadabra')
      >>> ct
          Counter({'a': 5, 'b': 2, 'r': 2, 'c': 1, 'd': 1})
      >>> ct.update('aaaaazzz')
      >>> ct
          Counter({'a': 10, 'z': 3, 'b': 2, 'r': 2, 'c': 1, 'd': 1})
      >>> ct.most_common(2)
          [('a', 10), ('z', 3)]


################################################################################################
set vs frozenset
################################################################################################
Though sets can't contain mutable objects, sets are mutable:
      >>> cities = set(["Frankfurt", "Basel","Freiburg"])
      >>> cities.add("Strasbourg")
      >>> cities
      set(['Freiburg', 'Basel', 'Frankfurt', 'Strasbourg'])
      >>> 
Frozensets are like sets except that they cannot be changed, i.e. they are immutable:
      >>> cities = frozenset(["Frankfurt", "Basel","Freiburg"])
      >>> cities.add("Strasbourg")
          Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
          AttributeError: 'frozenset' object has no attribute 'add'
      >>> 

################################################################################################
Interesting lambda call:
################################################################################################
	>>> fruits = ['strawberry', 'fig', 'apple', 'cherry', 'raspberry', 'banana']
	>>> sorted(fruits, key=lambda word: word[::-1])
		['banana', 'apple', 'fig', 'raspberry', 'strawberry', 'cherry']

################################################################################################
Decorator:
################################################################################################
	def p_decorate(func):
	   def func_wrapper(name):
	       return "<p>{0}</p>".format(func(name))
	   return func_wrapper
	@p_decorate
	def get_text(name):
	   return "lorem ipsum, {0} dolor sit amet".format(name)
	print get_text("John")


	def p_decorate(func):
	   def func_wrapper(name):
	       return "<p>{0}</p>".format(func(name))
	   return func_wrapper
	def strong_decorate(func):
	    def func_wrapper(name):
	        return "<strong>{0}</strong>".format(func(name))
	    return func_wrapper
	def div_decorate(func):
	    def func_wrapper(name):
	        return "<div>{0}</div>".format(func(name))
	    return func_wrapper
	@div_decorate
	@p_decorate
	@strong_decorate
	def get_text(name):
	   return "lorem ipsum, {0} dolor sit amet".format(name)
	print get_text("John")
	
	
	def p_decorate(func):
	   def func_wrapper(self):
	       return "<p>{0}</p>".format(func(self))
	   return func_wrapper
	class Person(object):
	    def __init__(self):
	        self.name = "John"
	        self.family = "Doe"
	    @p_decorate
	    def get_fullname(self):
	        return self.name+" "+self.family
	my_person = Person()
	print my_person.get_fullname()


	def p_decorate(func):
	   def func_wrapper(*args, **kwargs):
	       return "<p>{0}</p>".format(func(*args, **kwargs))
	   return func_wrapper
	class Person(object):
	    def __init__(self):
	        self.name = "John"
	        self.family = "Doe"
	    @p_decorate
	    def get_fullname(self):
	        return self.name+" "+self.family
	my_person = Person()
	print my_person.get_fullname()


	def tags(tag_name):
	    def tags_decorator(func):
	        def func_wrapper(name):
	            return "<{0}>{1}</{0}>".format(tag_name, func(name))
	        return func_wrapper
	    return tags_decorator
	@tags("p")
	def get_text(name):
	    return "Hello "+name
	print get_text("John")

################################################################################################
del and garbage collection:
################################################################################################
	The del statement deletes names, not objects. An object may be garbage collected as
	result of a del command, but only if the variable deleted holds the last reference to the
	object, or if the object becomes unreachable4. Rebinding a variable may also cause the
	number of references to an object reach zero, causing its destruction.
	
################################################################################################
Immutables tricks:
################################################################################################
	for a tuple/str/bytes t, t[:] does not make a copy, but returns a reference 
	to the same object. You also get a reference to the same tuple if you write tuple(t)
	a frozenset is not a sequence, so fs[:] does not work if fs is a frozenset
	fs.copy() has the same effect: it cheats and returns a reference to the same object, and
	not a copy at all.


################################################################################################
interning:
################################################################################################
	The sharing of string literals is an optimization technique called interning. String 
	literals may create shared objects
		>>> s1 = 'ABC'
		>>> s2 = 'ABC' 
		>>> s2 is s1 
			True


################################################################################################
classmethod versus staticmethod:
################################################################################################
	classmethod defines a method that operates on the class and not on instances. 
	classmethod changes the way the method is called, so it receives the class itself
	as the first argument, instead of an instance. Its most common use is for alternate 
	constructors, the first parameter of a class method should be class (not self aka instance)
	
	staticmethod decorator changes a method so that it receives no special first argument. 
	In essence, a static method is just like a plain function that happens to live in a 
	class body, instead of being defined at the module level.
	

################################################################################################
bitwise operation ^ (XOR -- 1^1=0 0^0=0 1^0=1 0^1=1):
################################################################################################


################################################################################################
name mangling -- Private and “protected” attributes in Python
################################################################################################
	name an instance attribute in the form __mood (two leading underscores and zero or at 
	most one trailing underscore), Python stores the name in the instance __dict__ prefixed 
	with a leading underscore and the class name, so in the	Dog class, __mood becomes 
	_Dog__mood, and in Beagle it’s _Beagle__mood. This language feature goes by the lovely 
	name of name mangling.

################################################################################################
Make class instances immutable
################################################################################################
	define attribute private using "name mangling"
	Use @property decorator marks the getter method of a property
		class Vector2d:
			def __init__(self, x, y):
				self.__x = float(x)
				self.__y = float(y)
			@property
			def x(self):
				return self.__x
			@property
			def y(self):
				return self.__y
			def __iter__(self):
				return (i for i in (self.x, self.y))

################################################################################################
__slots__ saving memory
################################################################################################
	By defining __slots__ in the class, you are telling the interpreter: “These are all the
	instance attributes in this class.” Python then stores them in a tuple-like structure in
	each instance, avoiding the memory overhead of the per-instance __dict__. This can
	make a huge difference in memory usage if your have millions of instances active at the
	same time.
	class Vector2d:
		__slots__ = ('__x', '__y')
	• You must remember to redeclare __slots__ in each subclass, since the inherited
	  attribute is ignored by the interpreter.
	• Instances will only be able to have the attributes listed in __slots__, unless you
	  include '__dict__' in __slots__ — but doing so may negate the memory savings.
	• Instances cannot be targets of weak references unless you remember to include
	  '__weakref__' in __slots__.
	  
################################################################################################
make class sliceable -- define __len__ and __getitem__
make class iterable  -- define __iter__
make class hashable  -- define __eq__ and __hash__
################################################################################################

################################################################################################
monkey patching
################################################################################################
	A MonkeyPatch is a piece of Python code which extends or modifies other code at runtime.
	A simple example looks like this:
		from SomeOtherProduct.SomeModule import SomeClass
		def speak(self):
    			return "ook ook eee eee eee!"
		SomeClass.speak = speak

################################################################################################
Define abstract based class
################################################################################################
	import abc
	class Tombola(abc.ABC):
		@abc.abstractmethod
		def load(self, iterable):
			"""Add items from an iterable."""
		@abc.abstractmethod
		def pick(self):
			"""Remove item at random, returning it.
			This method should raise `LookupError` when the instance is empty.
			"""
	However, the abc.ABC class is new in Python 3.4, so if you are using an earlier version
	of Python — and it does not make sense to subclass another existing ABC — then you
	must use the metaclass= keyword in the class statement, pointing to abc.ABCMeta
	(not abc.ABC). 
		class Tombola(metaclass=abc.ABCMeta): # this is prior to python 3.4
		# ...
	The metaclass= keyword argument was introduced in Python 3. In Python 2, you must
	use the __metaclass__ class attribute:
		class Tombola(object): # this is Python 2!!!
		__metaclass__ = abc.ABCMeta

################################################################################################
Define virtual subclass
################################################################################################
	from random import randrange
	from tombola import Tombola
	@Tombola.register #
	class TomboList(list):	
