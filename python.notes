################################################################################################
string to list:
################################################################################################
  list1 = list(str1)

################################################################################################
create list with for loop
################################################################################################
  >>> def return_xy(x,y):
	    return(x,y)
  >>> list3 = [return_xy(x,y) for x in list1 for y in list2]
  >>> list3
      [('a', 'h'), ('a', 'e'), ('a', 'l'), ('a', 'l'), ('a', 'o'), ('b', 'h'), ('b', 'e'), ('b', 'l'), ('b', 'l'), ('b', 'o'), ('c', 'h'), ('c', 'e'), ('c', 'l'), ('c', 'l'), ('c', 'o'), ('d', 'h'), ('d', 'e'), ('d', 'l'), ('d', 'l'), ('d', 'o'), ('e', 'h'), ('e', 'e'), ('e', 'l'), ('e', 'l'), ('e', 'o')]
  >>> list3 = [[x,y] for x in list1 for y in list2]
  >>> list3
      [['a', 'h'], ['a', 'e'], ['a', 'l'], ['a', 'l'], ['a', 'o'], ['b', 'h'], ['b', 'e'], ['b', 'l'], ['b', 'l'], ['b', 'o'], ['c', 'h'], ['c', 'e'], ['c', 'l'], ['c', 'l'], ['c', 'o'], ['d', 'h'], ['d', 'e'], ['d', 'l'], ['d', 'l'], ['d', 'o'], ['e', 'h'], ['e', 'e'], ['e', 'l'], ['e', 'l'], ['e', 'o']]

################################################################################################
list.reverse() vs reversed(list)
list.sort() vs sorted(list)
################################################################################################
  list.reverse() is inplace. reversed() return "list_reverseiterator object"
  list.sort() is inplace. reversed() return "sorted list"

################################################################################################
map() filter() reduce()
################################################################################################
  >>> a = [1,2,3,4]
  >>> b = [17,12,11,10]
  >>> c = [-1,-4,5,9]
  >>> map(lambda x,y:x+y, a,b)
      [18, 14, 14, 14]
  >>> map(lambda x,y,z:x+y+z, a,b,c)
      [17, 10, 19, 23]
  >>> map(lambda x,y,z:x+y-z, a,b,c)
      [19, 18, 9, 5]
  >>> fib = [0,1,1,2,3,5,8,13,21,34,55]
  >>> result = filter(lambda x: x % 2, fib)
  >>> print result
      [1, 1, 3, 5, 13, 21, 55]
  >>> result = filter(lambda x: x % 2 == 0, fib)
  >>> print result
      [0, 2, 8, 34]
  The function reduce(func, seq) continually applies the function func() to the sequence seq. It returns a single value.
  >>> f = lambda a,b: a if (a > b) else b
  >>> reduce(f, [47,11,42,102,13])
      102
  >>> reduce(lambda x, y: x+y, range(1,101))
      5050

################################################################################################
Slicing
################################################################################################
  >>> str1='abcde'
  >>> str1[-1]
      'e'
  >>> str1[:-1]
      'abcd'
  >>> str1[::-1]
      'edcba'

################################################################################################
list.sort and the sorted
################################################################################################
  >>> fruits = ['grape', 'raspberry', 'apple', 'banana']
  >>> sorted(fruits, reverse=True)
      ['raspberry', 'grape', 'banana', 'apple']
  >>> sorted(fruits, key=len)
      ['grape', 'apple', 'banana', 'raspberry']
  >>> sorted(fruits, key=len, reverse=True)
      ['raspberry', 'banana', 'grape', 'apple']
      
################################################################################################
bisect.bisect() and bisect.insort()
################################################################################################
  >>> def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):
      ... i = bisect.bisect(breakpoints, score)
      ... return grades[i]
      ...
  >>> [grade(score) for score in [33, 99, 77, 70, 89, 90, 100]]
      ['F', 'A', 'C', 'C', 'B', 'A', 'A']
  insort(seq, item) inserts item into seq so as to keep seq in ascending order

################################################################################################
Array.array numpy scipy
################################################################################################
  >>> a = numpy.arange(12)
  >>> a
      array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
  >>> a.shape = 3, 4
  >>> a
      array([[ 0, 1, 2, 3],
            [ 4, 5, 6, 7],
            [ 8, 9, 10, 11]])
  >>> a[2]
      array([ 8, 9, 10, 11])
  >>> a[2, 1]
      9
  >>> a[:, 1]
      array([1, 5, 9])
  >>> a.transpose()
      array([[ 0, 4, 8],
            [ 1, 5, 9],
            [ 2, 6, 10],
            [ 3, 7, 11]])
            

################################################################################################
deque
################################################################################################
  >>> from collections import deque
  >>> dq = deque(range(10), maxlen=10)
  >>> dq
      deque([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], maxlen=10)
  >>> dq.rotate(3)
  >>> dq
      deque([7, 8, 9, 0, 1, 2, 3, 4, 5, 6], maxlen=10)
  >>> dq.rotate(-4)
  >>> dq
      deque([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], maxlen=10)
  >>> dq.appendleft(-1)
  >>> dq
      deque([-1, 1, 2, 3, 4, 5, 6, 7, 8, 9], maxlen=10)
  >>> dq.extend([11, 22, 33])
  >>> dq
      deque([3, 4, 5, 6, 7, 8, 9, 11, 22, 33], maxlen=10)
  >>> dq.extendleft([10, 20, 30, 40])
  >>> dq
      deque([40, 30, 20, 10, 3, 4, 5, 6, 7, 8], maxlen=10)

################################################################################################
enumerate(sequence, start=0)
################################################################################################
  >>> seasons = ['Spring', 'Summer', 'Fall', 'Winter']
  >>> list(enumerate(seasons))
      [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]
  >>> list(enumerate(seasons, start=1))
      [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]

################################################################################################
Iterator functions
################################################################################################
Iterator	          Arguments	                                                        Results	Example
count()	            start, [step]	start, start+step, start+2*step, ...	              count(10) --> 10 11 12 13 14 ...
cycle()	            p	p0, p1, ... plast, p0, p1, ...	                                cycle('ABCD') --> A B C D A B C D ...
repeat()	          elem [,n]	elem, elem, elem, ... endlessly or up to n times	      repeat(10, 3) --> 10 10 10
chain()	            p, q, ...	p0, p1, ... plast, q0, q1, ...	                        chain('ABC', 'DEF') --> A B C D E F
compress()	        data, selectors	(d[0] if s[0]), (d[1] if s[1]), ...	              compress('ABCDEF', [1,0,1,0,1,1]) --> A C E F
dropwhile()	        pred, seq	seq[n], seq[n+1], starting when pred fails	            dropwhile(lambda x: x<5, [1,4,6,4,1]) --> 6 4 1
groupby()	          iterable[, keyfunc]	sub-iterators grouped by value of keyfunc(v)	 
ifilter()	          pred, seq	elements of seq where pred(elem) is true	              ifilter(lambda x: x%2, range(10)) --> 1 3 5 7 9
ifilterfalse()	    pred, seq	elements of seq where pred(elem) is false             	ifilterfalse(lambda x: x%2, range(10)) --> 0 2 4 6 8
islice()	          seq, [start,] stop [, step]	elements from seq[start:stop:step]	  islice('ABCDEFG', 2, None) --> C D E F G
imap()	            func, p, q, ...	func(p0, q0), func(p1, q1), ...	                  imap(pow, (2,3,10), (5,2,3)) --> 32 9 1000
starmap()	          func, seq	func(*seq[0]), func(*seq[1]), ...	                      starmap(pow, [(2,5), (3,2), (10,3)]) --> 32 9 1000
tee()	              it, n	it1, it2, ... itn splits one iterator into n	 
takewhile()	        pred, seq	seq[0], seq[1], until pred fails	                      takewhile(lambda x: x<5, [1,4,6,4,1]) --> 1 4
izip()	            p, q, ...	(p[0], q[0]), (p[1], q[1]), ...	                        izip('ABCD', 'xy') --> Ax By
izip_longest()	    p, q, ...	(p[0], q[0]), (p[1], q[1]), ...	                        izip_longest('ABCD', 'xy', fillvalue='-') --> Ax By C- D-

Combinatoric generators:
product()	          p, q, ... [repeat=1]	cartesian product, equivalent to a nested for-loop
permutations()	    p[, r]	r-length tuples, all possible orderings, no repeated elements
combinations()    	p, r	r-length tuples, in sorted order, no repeated elements
combinations_with_replacement()	p, r	r-length tuples, in sorted order, with repeated elements
product('ABCD', repeat=2)	 	                AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD
permutations('ABCD', 2)	 	                  AB AC AD BA BC BD CA CB CD DA DB DC
combinations('ABCD', 2)	 	                  AB AC AD BC BD CD
combinations_with_replacement('ABCD', 2)	 	AA AB AC AD BB BC BD CC CD DD

collections.OrderedDict
      maintains keys in insertion order, allowing iteration over items in a predictable
      order. The popitem method of an OrderedDict pops the first item by default, but
      if called as my_odict.popitem(last=True), it pops the last item added.
collections.ChainMap
      holds a list of mappings which can be searched as one. The lookup is performed on
      each mapping in order, and succeeds if the key is found in any of them. This is useful
      to interpreters for languages with nested scopes, where each mapping represents a
      scope context. The ChainMap section in the collections docs has several examples
      of ChainMap usage, including this snippet inspired by the basic rules of variable
      lookup in Python:
            import builtins
            pylookup = ChainMap(locals(), globals(), vars(builtins))
collections.Counter
      >>> ct = collections.Counter('abracadabra')
      >>> ct
          Counter({'a': 5, 'b': 2, 'r': 2, 'c': 1, 'd': 1})
      >>> ct.update('aaaaazzz')
      >>> ct
          Counter({'a': 10, 'z': 3, 'b': 2, 'r': 2, 'c': 1, 'd': 1})
      >>> ct.most_common(2)
          [('a', 10), ('z', 3)]

################################################################################################
set vs frozenset
################################################################################################
Though sets can't contain mutable objects, sets are mutable:
      >>> cities = set(["Frankfurt", "Basel","Freiburg"])
      >>> cities.add("Strasbourg")
      >>> cities
      set(['Freiburg', 'Basel', 'Frankfurt', 'Strasbourg'])
      >>> 
Frozensets are like sets except that they cannot be changed, i.e. they are immutable:
      >>> cities = frozenset(["Frankfurt", "Basel","Freiburg"])
      >>> cities.add("Strasbourg")
          Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
          AttributeError: 'frozenset' object has no attribute 'add'
      >>> 

################################################################################################
Interesting lambda call:
################################################################################################
	>>> fruits = ['strawberry', 'fig', 'apple', 'cherry', 'raspberry', 'banana']
	>>> sorted(fruits, key=lambda word: word[::-1])
		['banana', 'apple', 'fig', 'raspberry', 'strawberry', 'cherry']

################################################################################################
Decorator:
################################################################################################
	def p_decorate(func):
	   def func_wrapper(name):
	       return "<p>{0}</p>".format(func(name))
	   return func_wrapper
	@p_decorate
	def get_text(name):
	   return "lorem ipsum, {0} dolor sit amet".format(name)
	print get_text("John")


	def p_decorate(func):
	   def func_wrapper(name):
	       return "<p>{0}</p>".format(func(name))
	   return func_wrapper
	def strong_decorate(func):
	    def func_wrapper(name):
	        return "<strong>{0}</strong>".format(func(name))
	    return func_wrapper
	def div_decorate(func):
	    def func_wrapper(name):
	        return "<div>{0}</div>".format(func(name))
	    return func_wrapper
	@div_decorate
	@p_decorate
	@strong_decorate
	def get_text(name):
	   return "lorem ipsum, {0} dolor sit amet".format(name)
	print get_text("John")
	
	
	def p_decorate(func):
	   def func_wrapper(self):
	       return "<p>{0}</p>".format(func(self))
	   return func_wrapper
	class Person(object):
	    def __init__(self):
	        self.name = "John"
	        self.family = "Doe"
	    @p_decorate
	    def get_fullname(self):
	        return self.name+" "+self.family
	my_person = Person()
	print my_person.get_fullname()


	def p_decorate(func):
	   def func_wrapper(*args, **kwargs):
	       return "<p>{0}</p>".format(func(*args, **kwargs))
	   return func_wrapper
	class Person(object):
	    def __init__(self):
	        self.name = "John"
	        self.family = "Doe"
	    @p_decorate
	    def get_fullname(self):
	        return self.name+" "+self.family
	my_person = Person()
	print my_person.get_fullname()


	def tags(tag_name):
	    def tags_decorator(func):
	        def func_wrapper(name):
	            return "<{0}>{1}</{0}>".format(tag_name, func(name))
	        return func_wrapper
	    return tags_decorator
	@tags("p")
	def get_text(name):
	    return "Hello "+name
	print get_text("John")
