Express.js is a Node.js web application server framework, designed for building single-page, 
multi-page, and hybrid web applications. It is the de facto standard server framework for 
node.js meaning that it is relatively minimal with many features available as plugins. 
Express is the backend part of the MEAN stack, together with MongoDB database and AngularJS 
frontend framework.


Node.js is a platform for building server-side event-driven i/o application using javascript.

Express.js is a framework based on node.js for building web-application using principles and 
approaches of node.js


Node.js is an open-source, cross-platform runtime environment for developing server-side Web 
applications

Model–view–controller (MVC) is a software architectural pattern for implementing user 
interfaces on computers. It divides a given software application into three interconnected 
parts, so as to separate internal representations of information from the ways that information 
is presented to or accepted from the user.


CommonJS modules
CommonJS is a project started in 2009 to standardize the way of working with
JavaScript outside the browser. The project has evolved since then to support a variety
of JavaScript issues, including the global namespace issue, which was solved through a
simple specification of how to write and include isolated JavaScript modules.
The CommonJS standards specify the following three key components when working with modules:
      • require(): This method is used to load the module into your code.
      • exports: This object is contained in each module and allows you to expose
      pieces of your code when the module is loaded.
      • module: This object was originally used to provide metadata information
      about the module. It also contains the pointer of an exports object as a
      property. However, the popular implementation of the exports object as a
      standalone object literally changed the use case of the module object.
      In Node's CommonJS module implementation, each module is written in a single
      JavaScript file and has an isolated scope that holds its own variables. The author of
      the module can expose any functionality through the exports object.

var http = require('http');
http.createServer(function(req, res) {
    res.writeHead(200, {
        'Content-Type': 'text/plain'
    });
    res.end('Hello World');
}).listen(3000);

#####################################################################
Connect Module
#####################################################################
The way a Connect application works is by using an object called dispatcher.
The dispatcher object handles each HTTP request received by the server and
then decides, in a cascading way, the order of middleware execution.

Below example helloWorld() is the middleware

Using the app.use() method, you'll be able to set a series of
middleware functions that will be executed in FIFO order.

var connect = require('connect');
var app = connect();

var logger = function(req, res, next) {
      console.log(req.method, req.url);
      next();
};

var helloWorld = function(req, res, next) {
      res.setHeader('Content-Type', 'text/plain');
      res.end('Hello World');
};

app.use(logger);
app.use(helloWorld);
app.listen(3000);


#####################################################################
Mounting Connect middleware
#####################################################################
app.use(logger);
app.use('/hello', helloWorld);
app.use('/goodbye', goodbyeWorld);


#####################################################################
Express.js
#####################################################################
    var express = require('express');
    var app = express();
    app.use('/', function(req, res) {
          res.send('Hello World');
    });
    app.listen(3000);
    console.log('Server running at http://localhost:3000/');
    module.exports = app;
    
Express presents three major objects that you'll frequently use. 
      The application object is the instance of an Express application 
      you created in the first example and is usually used to configure 
      your application. 
      
      The request object is a wrapper of Node's HTTP request object and
      is used to extract information about the currently handled HTTP 
      request. 
      
      The response object is a wrapper of Node's HTTP response object and
      is used to set the response data and headers.


#####################################################################
Express.js -- The application object
####################################################################
        • app.set(name, value): This is used to set environment variables that
        Express will use in its configuration.
        • app.get(name): This is used to get environment variables that Express is
        using in its configuration.
        • app.engine(ext, callback): This is used to define a given template
        engine to render certain file types, for example, you can tell the EJS template
        engine to use HTML files as templates like this: app.engine('html',
        require('ejs').renderFile).
        • app.locals: This is used to send application-level variables to all rendered
        templates.
        • app.use([path], callback): This is used to create an Express middleware
        to handle HTTP requests sent to the server. Optionally, you'll be able to
        mount middleware to respond to certain paths.
        • app.VERB(path, [callback...], callback): This is used to define one or
        more middleware functions to respond to HTTP requests made to a certain
        path in conjunction with the HTTP verb declared. For instance, when you
        want to respond to requests that are using the GET verb, then you can just
        assign the middleware using the app.get() method. For POST requests you'll
        use app.post(), and so on.
        • app.route(path).VERB([callback...], callback): This is used to define
        one or more middleware functions to respond to HTTP requests made to a
        certain unified path in conjunction with multiple HTTP verbs. For instance,
        when you want to respond to requests that are using the GET and POST
        verbs, you can just assign the appropriate middleware functions using app.
        route(path).get(callback).post(callback).
        • app.param([name], callback): This is used to attach a certain
        functionality to any request made to a path that includes a certain routing
        parameter. For instance, you can map logic to any request that includes the
        userId parameter using app.param('userId', callback).
        

#####################################################################
Express.js -- The request object
####################################################################
        • req.query: This is an object containing the parsed query-string parameters.
        • req.params: This is an object containing the parsed routing parameters.
        • req.body: This is an object used to retrieve the parsed request body. This
        property is included in the bodyParser() middleware.
        • req.param(name): This is used to retrieve a value of a request parameter.
        Note that the parameter can be a query-string parameter, a routing
        parameter, or a property from a JSON request body.
        • req.path, req.host, and req.ip: These are used to retrieve the current
        request path, host name, and remote IP.
        • req.cookies: This is used in conjunction with the cookieParser()
        middleware to retrieve the cookies sent by the user-agent.
        
        
#####################################################################
Express.js -- The response object
####################################################################
        • res.status(code): This is used to set the response HTTP status code.
        • res.set(field, [value]): This is used to set the response HTTP header.
        • res.cookie(name, value, [options]): This is used to set a response
        cookie. The options argument is used to pass an object defining common
        cookie configuration, such as the maxAge property.
        • res.redirect([status], url): This is used to redirect the request to a
        given URL. Note that you can add an HTTP status code to the response.
        When not passing a status code, it will be defaulted to 302 Found.
        • res.send([body|status], [body]): This is used for non-streaming
        responses. This method does a lot of background work, such as setting the
        Content-Type and Content-Length headers, and responding with the
        proper cache headers.
        • res.json([status|body], [body]): This is identical to the res.send()
        method when sending an object or array. Most of the times, it is used as
        syntactic sugar, but sometimes you may need to use it to force a JSON
        response to non-objects, such as null or undefined.
        • res.render(view, [locals], callback): This is used to render a view
        and send an HTML response.

#####################################################################        
Express.js External middleware
#####################################################################
The popular Express middleware are as follows:
        • Morgan: This is an HTTP request logger middleware.
        • body-parser: This is a body-parsing middleware that is used to parse the
        request body, and it supports various request types.
        • method-override: This is a middleware that provides HTTP verb support
        such as PUT or DELETE in places where the client doesn't support it.
        • Compression: This is a compression middleware that is used to compress the
        response data using gzip/deflate.
        • express.static: This middleware used to serve static files.
        • cookie-parser: This is a cookie-parsing middleware that populates the
        req.cookies object.
        • Session: This is a session middleware used to support persistent sessions.

#####################################################################        
MEAN.js folder structure
#####################################################################        
      The controllers folder is where you keep application controllers
      The models folder is where you keep application models
      The routes folder is where you keep application routing middleware
      The views folder is where you keep application views
      
The public folder is where keep  static client-side files and is
divided into the following folders that represent a separation of 
functionality to comply with the MVC pattern:

        °° The config folder is where you keep your AngularJS
        application configuration files
        °° The controllers folder is where you keep your
        AngularJS application controllers
        °° The css folder is where you keep your CSS files
        °° The directives folder is where you keep your
        AngularJS application directives
        °° The filters folder is where you keep your AngularJS
        application filters
        °° The img folder is where you keep your image files
        °° The views folder is where you keep your AngularJS
        application views
        °° The application.js file is where you initialize your
        AngularJS application
        
The package.json file is the metadata file that helps you to organize your
application dependencies.

The server.js file is the main file of your Node.js application, and it will
load the express.js file as a module to bootstrap your Express application.

Handling request routing
Express supports the routing of requests using either the app.route(path).
VERB(callback) method or the app.VERB(path, callback) method, where
VERB should be replaced with a lowercase HTTP verb. 
      app.get('/', function(req, res) {
          res.send('This is a GET request');
      });
      
      app.route('/').get(function(req, res) {
          res.send('This is a GET request');
      }).post(function(req, res) {
          res.send('This is a POST request');
      });
      
Express is the ability to chain several middleware in a single routing definition.
      var app = express();
      app.get('/', hasName, sayHello);
      
#####################################################################
A Express.js project
#####################################################################
in application's root folder create a package.json file that contains the following code snippet:
{
    "name" : "MEAN",
    "version" : "0.0.3",
    "dependencies" : {
        "express" : "~4.8.8"
    }
}

in the app/controllers folder, create a file named index.server.controller.js with the following lines of code:
  exports.render = function(req, res) {
     res.send('Hello World');
  };
  
In the app/routes folder create a file named index.server.routes.js with the following code snippet:
  module.exports = function(app) {
      var index = require('../controllers/index.server.controller');
      app.get('/', index.render);
  };

create the Express application object and bootstrap it using the controller 
and routing modules you just created. In the config folder and create a file
named express.js with the following code snippet:
  var express = require('express');
  module.exports = function() {
      var app = express();
      require('../app/routes/index.server.routes.js')(app);
      return app;
  };

To finalize your application, you'll need to create a file named server.js in the root
folder and copy the following code:
    var express = require('./config/express');
    var app = express();
    app.listen(3000);
    module.exports = app;

##############################################################################
Rendering views
##############################################################################
Express has two methods for rendering views: 
      . app.render(), which is used to render the view and then pass the HTML to 
      a callback function. (you'd like your application to send HTML e-mails)
      . and the more common res.render(), which renders the view locally and sends the HTML as a response.
      

In order to configure the Express view system, you will need to use the EJS template
engine in package.json file:
{
      "name": "MEAN",
      "version": "0.0.3",
      "dependencies": {
      "express": "~4.8.8",
      "morgan": "~1.3.0",
      "compression": "~1.0.11",
      "body-parser": "~1.8.0",
      "method-override": "~2.2.0",
      "ejs": "~1.0.0"
      }
}

To configure your Express application, go to the config/express.js file 
and change it to look like the following lines of code:

      app.set('views', './app/views');
      app.set('view engine', 'ejs');

EJS templates will reside in the app/views folder and will have the .ejs extension.


##############################################################################
MongoDB
##############################################################################

The BSON format (Binary JSON format)

MongoDB query that requests for documents with more than 10 comments
would be as follows
      db.posts.find({ commentsCount: { $gt: 10 } });

##############################################
MongoDB replica set
##############################################

##############################################
MongoDB sharding
##############################################

##############################################
MongoDB databases
##############################################
> use mean
or
$ mongo mean

> show dbs

##############################################
MongoDB collections
##############################################
below will create a collection named "posts" and insert first documents
> db.posts.insert({"title":"First Post", "user": "bob"})

> db.posts.find()

> show collections

delete the posts collection, you will need to execute the drop()
command as follows:
> db.posts.drop()

Creating a new document
You're already familiar with the basic method of creating a new document using
the insert() method, as you previously did in earlier examples. Besides the
insert() method, there are two more methods called update() and save() to
create new objects.

Creating a document using insert()
The most common way to create a new document is to use the insert() method.
The insert method takes a single argument that represents the new document.
To insert a new post, just issue the following command in the MongoDB shell:
      > db.posts.insert({"title":"Second Post", "user": "alice"})

Creating a document using update()
The update() method is usually used to update an existing document. You can also
use it to create a new document, if no document matches the query criteria, using the
following upsert flag:
      > db.posts.update({
      "user": "alice"
      }, {
      "title": "Second Post",
      "user": "alice"
      }, {
      upsert: true
      })
      
Creating a document using save()
Another way of creating a new document is by calling the save() method, passing it
a document that either doesn't have an _id field or has an _id field that doesn't exist
in the collection:
      > db.posts.save({"title":"Second Post", "user": "alice"})

Finding all the collection documents
> db.posts.find()

> db.posts.find({ "user": "alice" })

retrieve all the posts that were created by either alice or bob , 
you can use the following $in operator:
> db.posts.find({ "user": { $in: ["alice", "bob"] } })

> db.posts.find( { $or: [{ "user": "alice" }, { "user": "bob" }] })

Updating documents using update()
      > db.posts.update({
            "user": "alice"
      }, {
      $set: {
            "title": "Second Post"
      }
      }, {
            multi: true
      })
      
Deleting all documents
> db.posts.remove()

> db.posts.remove({ "user": "alice" })

to remove the first post made by alice , you'll need to execute the following command:
      > db.posts.remove({ "user": "alice" }, true)
      
##########################################
Mongoose
##########################################
Mongoose is a robust Node.js ODM module that adds MongoDB support to
your Express application.

Connecting to MongoDB
      mongodb://username:password@hostname:port/database

Connecting to a local instance, you can skip the username and password
and use the following URI:
      mongodb://localhost/mean-book

            In config/env/development.js file
                  module.exports = {
                        db: 'mongodb://localhost/mean-book',
                        sessionSecret: 'developmentSessionSecret'
                  };
            in your config folder, create a new file named mongoose.js that contains
            the following code snippet
                  var config = require('./config'),
                        mongoose = require('mongoose');
                  module.exports = function() {
                        var db = mongoose.connect(config.db);
                        return db;
                  };
            
            To initialize your Mongoose configuration, go back to your server.js 
            file, and change it to look like the following code snippet
                  var mongoose = require('./config/mongoose'),
                        express = require('./config/express');
                  var db = mongoose();
                  var app = express();
                  app.listen(3000);
                  module.exports = app;

Creating the user schema and model
Under app/models folder and create a new file named user.server.model.js
      var mongoose = require('mongoose'),
            Schema = mongoose.Schema;
      var UserSchema = new Schema({
            firstName: String,
            lastName: String,
            email: String,
            username: String,
            password: String
      });
      mongoose.model('User', UserSchema);

change your config/mongoose.js file to look like the following code snippet
      var config = require('./config'),
            mongoose = require('mongoose');
      module.exports = function() {
            var db = mongoose.connect(config.db);
            require('../app/models/user.server.model');
            return db;
      };

Creating new users using save()
Under the app/controllers folder, create a new file named users.server.
controller.js and paste the following lines of code
var User = require('mongoose').model('User');
      exports.create = function(req, res, next) {
            var user = new User(req.body);
            user.save(function(err) {
            if (err) {
                  return next(err);
            } else {
                  res.json(user);
            }
            });
      };

creating a file named users.server.routes.js inside the app/routes folder. 
In this newly created file, paste the following lines of code:
      var users = require('../../app/controllers/users.server.controller');
      module.exports = function(app) {
            app.route('/users').post(users.create);
      };

best practice to build your routes according to the REST principles.
In this case, the proper way to create a new user is to use an HTTP POST request to
the base users route as you defined here. Change your config/express.js file to
look like the following code snippet:

            app.set('views', './app/views');
            app.set('view engine', 'ejs');
            require('../app/routes/index.server.routes.js')(app);
            require('../app/routes/users.server.routes.js')(app);
            app.use(express.static('./public'));
            return app;
            
test your application would be to execute the following curl
command in your command-line tool:
            $ curl -X POST -H "Content-Type: application/json" -d
            '{"firstName":"First", "lastName":"Last","email":"user@example.com","user
            name":"username","password":"password"}' localhost:3000/users

Finding multiple user documents using find()
add the following list() method in your app/controllers/users.server.controller.js file:
            exports.list = function(req, res, next) {
                  User.find({}, function(err, users) {
                        if (err) {
                              return next(err);
                        } else {
                        res.json(users);
                        }
                  });
            };
            
go to your app/routes/users.server.routes.js file and change it to 
look like the following code snippet:
            var users = require('../../app/controllers/users.server.controller');
            module.exports = function(app) {
                  app.route('/users').post(users.create).get(users.list);
            };
            
Advanced querying using find()
to paginate through the users collection and retrieve only a subset of your 
users collection, you can use the skip and limit options as follows:
      User.find({}, 'username email', {
            skip: 10,
            limit: 10
      }, function(err, users) {
      ...
      });
This will return a subset of up to 10 user documents while skipping the first
10 documents.

Reading a single user document using findOne()
Add the following lines of code at the end of your app/controllers/users.server.controller.js file:
            exports.read = function(req, res) {
                  res.json(req.user);
            };
            exports.userByID = function(req, res, next, id) {
                  User.findOne({
                        _id: id
                  }, function(err, user) {
                        if (err) {
                              return next(err);
                        } else {
                              req.user = user;
                              next();
                        }
                  });
            };

the userById() method is the one responsible for populating the
req.user object. You will use the userById() method as a middleware to deal with
the manipulation of single documents when performing read, delete, and update
operations. To do so, you will have to modify your app/routes/users.server.
routes.js file to look like the following lines of code:
            var users = require('../../app/controllers/users.server.controller');
            module.exports = function(app) {
                  app.route('/users').post(users.create).get(users.list);
                  app.route('/users/:userId').get(users.read);
                  app.param('userId', users.userByID);
            };
            
Updating an existing user document
update() , findOneAndUpdate() , and findByIdAndUpdate() methods.

go back
to your app/controllers/users.server.controller.js file, and add a new
update() method:
            exports.update = function(req, res, next) {
                  User.findByIdAndUpdate(req.user.id, req.body, function(err, user) {
                        if (err) {
                              return next(err);
                        } else {
                              res.json(user);
                        }
                  });
            };
            
Go back to your app/routes/users.server.routes.js file and change it
to look like the following code snippet:
            var users = require('../../app/controllers/users.server.controller');
            module.exports = function(app) {
                  app.route('/users').post(users.create).get(users.list);
                  app.route('/users/:userId').get(users.read).put(users.update);
                  app.param('userId', users.userByID);
            };
            
Deleting an existing user document
The Mongoose model has several available methods to remove an existing
document. Among those are the remove() , findOneAndRemove() , and
findByIdAndRemove() methods.

go back to your app/controllers/users.server.controller.js file, and add the following delete() method:
            exports.delete = function(req, res, next) {
                  req.user.remove(function(err) {
                  if (err) {
                        return next(err);
                  } else {
                        res.json(req.user);
                  }
                  })
            };
            
Go to your app/routes/users.server.routes.js file and change it to look like the
following code snippet:
            var users = require('../../app/controllers/users.server.controller');
            module.exports = function(app) {
                  app.route('/users').post(users.create).get(users.list);
                  app.route('/users/:userId').get(users.read).put(users.update).delete(users.delete);
                  app.param('userId', users.userByID);
            };

$ curl -X DELETE localhost:3000/users/[id]


Introducing AngularJS
AngularJS is a frontend JavaScript framework designed to build single-page
applications using the MVC architecture. The AngularJS approach is to extend
the functionality of HTML using special attributes that bind JavaScript business
logic with HTML elements.

The core module of AngularJS
The core module of AngularJS is loaded with everything you need to bootstrap your
application. It contains several objects and entities that enable the basic operation of
an AngularJS application.

Application modules
Every AngularJS application needs at least one module to bootstrap, and we'll refer
to this module as the application module. AngularJS modules are created and
retrieved using the angular.module(name, [requires], [configFn]) method,
which accepts three arguments:
•	 name : This is a string defining the module name
•	 requires : This is an array of strings defining other modules as dependencies
•	 configFN : This is a function that will run when the module is being registered

Two-way data binding
One of the most popular features of AngularJS is its two-way data binding
mechanism. Two-way data binding enables AngularJS applications to always keep
the model synchronized with the view and vice versa. This means that what the
view renders is always the projection of the model.

AngularJS uses the browser to compile HTML templates, which contain special
directives and binding instructions that produce a live view. Any events that happen
in the view automatically update the model, while any changes occurring in the
model immediately get propagated to the view.

Core directives
AngularJS comes prebundled with necessary directives, which define the
functionality of an Angular application. A directive is usually placed on an element
as an attribute or defined as the element name.

The most basic directive is called ng-app and is placed on the DOM element (usually
the page's body or html tag) you want Angular to use as the root application
element. A body tag with the ng-app directive will be as follows:
<body ng-app></body>

•	 ng-controller : This tells the compiler which controller class to use to
manage this element view
•	 ng-model : This is placed on input elements and binds the input value to a
property on the model
•	 ng-show/ng-hide : This shows and hides an element according to a
Boolean expression
•	 ng-repeat : This iterates over a collection and duplicates the element for
each item

Bootstrapping an AngularJS application
Bootstrapping an AngularJS application means that we tell Angular which DOM
element is the root element of the application and when to initiate the Angular
application.

Automatic bootstrap
To automatically bootstrap the AngularJS application, you will need to use the
ng-app directive.

Configuring AngularJS
To start using AngularJS, you will need to include the framework JavaScript file
in your main EJS view. In our case, we will use the app/views/index.ejs file as
the main application page. Go to your app/views/index.ejs file and change it,
as follows:
      <!DOCTYPE html>
      <html xmlns:ng="http://angularjs.org">
      <head>
            <title><%= title %></title>
      </head>
      <body>
            <% if (userFullName) { %>
                  <h2>Hello <%=userFullName%> </h2>
                  <a href="/signout">Sign out</a>
            <% } else { %>
                  <a href="/signup">Signup</a>
                  <a href="/signin">Signin</a>
            <% } %>
            <script type="text/javascript" src="/lib/angular/angular.js"></script>
      </body>
      </html>
      
Bootstrapping your AngularJS application
create a file named public/application.js inside the public folder, and paste the following code in it:
      var mainApplicationModuleName = 'mean';
      var mainApplicationModule = angular.module(mainApplicationModuleName
      , []);
      angular.element(document).ready(function() {
      angular.bootstrap(document, [mainApplicationModuleName]);
      });
      
AngularJS views
AngularJS views are HTML templates rendered by the AngularJS compiler to
produce a manipulated DOM on your page. To start with your first view, create a
new example.client.view.html file inside your public/example/views folder,
and paste the following lines of code:
      <section>
            <input type=text id=text1 ng-model=name>
            <input type=text id=text2 ng-model=name>
      </section>
      
To use this template as a view, you'll have to go back to your app/views/index.ejs
file and change it again, as follows:
      <!DOCTYPE html>
      <html xmlns:ng="http://angularjs.org">
      <head>
            <title><%= title %></title>
      </head>
      <body>
            <% if (userFullName) { %>
                  <h2>Hello <%=userFullName%> </h2>
                  <a href="/signout">Sign out</a>
            <% } else { %>
                  <a href="/signup">Signup</a>
                  <a href="/signin">Signin</a>
            <% } %>
            <section ng-include="'example/views/example.client.view.html'"></section>
            <script type="text/javascript" src="/lib/angular/angular.js"></script>
            <script type="text/javascript" src="/example/example.client.module.js"></script>
            <script type="text/javascript" src="/application.js"></script>
      </body>
      </html>
      
AngularJS controllers and scopes
Controllers are basically constructor functions, which AngularJS uses to create a new
instance of a controller object. Their purpose is to augment data model reference
objects called scopes.
Controller instances are usually created when you use the ng-controller directive.
Inside your public/example/controllers folder, create a new file called
example.client.controller.js containing the following code snippet:
      angular.module('example').controller('ExampleController', ['$scope',
            function($scope) {
                  $scope.name = 'MEAN Application';
            }
      ]);
      
To use this controller, you'll need to include its JavaScript file
in the main application's page and add the ng-controller directive to your view.
Start by changing your app/views/index.ejs as follows:
      <!DOCTYPE html>
      <html xmlns:ng="http://angularjs.org">
      <head>
            <title><%= title %></title>
      </head>
      <body>
            <% if (userFullName) { %>
                  <h2>Hello <%=userFullName%> </h2>
                  <a href="/signout">Sign out</a>
            <% } else { %>
                  <a href="/signup">Signup</a>
                  <a href="/signin">Signin</a>
            <% } %>
            <section ng-include="'example/views/example.client.view.html'"></section>
            <script type="text/javascript" src="/lib/angular/angular.js"></script>
            <script type="text/javascript" src="/example/example.client.module.js"></script>
            <script type="text/javascript" src="/example/controllers/example.client.controller.js"></script>
            <script type="text/javascript" src="/application.js"></script>
      </body>
      </html>
Now change your public/example/views/example.client.view.html file
as follows:
      <section ng-controller=ExampleController>
            <input type=text id=text1 ng-model=name>
            <input type=text id=text2 ng-model=name>
      </section>

AngularJS routing
the AngularJS team developed the ngRoute module that allows you to define URL 
paths and their corresponding templates,which will be rendered whenever the
user navigates to those paths.
edit your app/views/index.ejs file as follows:
      <script type="text/javascript" src="/lib/angular-route/angular-route.js"></script>

Finally, you will need to add the ngRoute module as a dependency for your main
application's module, so change your public/application.js file as follows:
      var mainApplicationModuleName = 'mean';
      var mainApplicationModule = angular.module(mainApplicationModuleName,
      ['ngRoute', 'example']);
      angular.element(document).ready(function() {
            angular.bootstrap(document, [mainApplicationModuleName]);
      });
      
